# Generated by Django 4.2.7 on 2023-12-07 08:20

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Adv",
            fields=[
                ("sneaker_id", models.CharField(max_length=255)),
                (
                    "adv_id",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("adv_name", models.CharField(max_length=255)),
                ("adv_num", models.IntegerField()),
                ("createdAt", models.DateTimeField()),
                ("updatedAt", models.DateTimeField()),
            ],
            options={
                "db_table": "advantage",
            },
        ),
        migrations.CreateModel(
            name="Blog",
            fields=[
                (
                    "bolg_id",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("user_id", models.CharField(max_length=255)),
                ("blog_title", models.CharField(max_length=255)),
                ("blog_content", models.CharField(max_length=255)),
                ("blog_img", models.CharField(max_length=255)),
                ("blog_time", models.DateTimeField()),
                ("blog_liked", models.IntegerField()),
                ("blog_comment_num", models.IntegerField()),
                ("blog_visited", models.IntegerField()),
                ("blog_label", models.CharField(max_length=255)),
                ("blog_categroy", models.CharField(max_length=255)),
                ("blog_recommand", models.IntegerField()),
                ("createdAt", models.DateTimeField()),
                ("updatedAt", models.DateTimeField()),
            ],
            options={
                "db_table": "blog",
            },
        ),
        migrations.CreateModel(
            name="Brand",
            fields=[
                (
                    "brand_id",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("brand_img", models.CharField(max_length=255)),
                ("brand_name", models.CharField(max_length=255)),
                ("createdAt", models.DateTimeField()),
                ("updatedAt", models.DateTimeField()),
            ],
            options={
                "db_table": "brand",
            },
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                ("blog_id", models.CharField(max_length=255)),
                ("sneaker_id", models.CharField(max_length=255)),
                (
                    "comment_id",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("user_id", models.CharField(max_length=255)),
                ("comment_time", models.CharField(max_length=255)),
                ("comment_content", models.CharField(max_length=255)),
                ("father_id", models.CharField(max_length=255)),
                ("user_rating", models.FloatField()),
                ("createdAt", models.DateTimeField()),
                ("updatedAt", models.DateTimeField()),
            ],
            options={
                "db_table": "comment",
            },
        ),
        migrations.CreateModel(
            name="Disadv",
            fields=[
                ("sneaker_id", models.CharField(max_length=255)),
                (
                    "disadv_id",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("disadv_name", models.CharField(max_length=255)),
                ("disadv_num", models.IntegerField()),
                ("createdAt", models.DateTimeField()),
                ("updatedAt", models.DateTimeField()),
            ],
            options={
                "db_table": "disadvantage",
            },
        ),
        migrations.CreateModel(
            name="Follow",
            fields=[
                (
                    "user_id",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("follower", models.CharField(max_length=255)),
                ("followed", models.CharField(max_length=255)),
                ("createdAt", models.DateTimeField()),
                ("updatedAt", models.DateTimeField()),
            ],
            options={
                "db_table": "follow",
            },
        ),
        migrations.CreateModel(
            name="Like",
            fields=[
                (
                    "like_id",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("user_id", models.CharField(max_length=255)),
                ("blog_id", models.CharField(max_length=255)),
                ("createdAt", models.DateTimeField()),
                ("updatedAt", models.DateTimeField()),
            ],
            options={
                "db_table": "like",
            },
        ),
        migrations.CreateModel(
            name="Sneaker",
            fields=[
                (
                    "sneaker_id",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("sneaker_brand", models.CharField(max_length=255)),
                ("sneaker_model", models.CharField(max_length=255)),
                ("sneaker_rating", models.FloatField()),
                ("createdAt", models.DateTimeField()),
                ("updatedAt", models.DateTimeField()),
            ],
            options={
                "db_table": "sneaker",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(default="匿名用户", max_length=50, verbose_name="姓名"),
                ),
                ("introduce", models.TextField(default="暂无介绍", verbose_name="简介")),
                (
                    "company",
                    models.CharField(default="暂无信息", max_length=100, verbose_name="公司"),
                ),
                (
                    "profession",
                    models.CharField(default="暂无信息", max_length=100, verbose_name="职业"),
                ),
                (
                    "address",
                    models.CharField(default="暂无信息", max_length=100, verbose_name="住址"),
                ),
                (
                    "telephone",
                    models.CharField(default="暂无信息", max_length=11, verbose_name="电话"),
                ),
                (
                    "wx",
                    models.CharField(default="暂无信息", max_length=50, verbose_name="微信"),
                ),
                (
                    "qq",
                    models.CharField(default="暂无信息", max_length=50, verbose_name="QQ"),
                ),
                (
                    "wb",
                    models.CharField(default="暂无信息", max_length=100, verbose_name="微博"),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        unique=True,
                        verbose_name="邮箱",
                    ),
                ),
                (
                    "photo",
                    models.ImageField(
                        blank=True, upload_to="images/user/", verbose_name="头像"
                    ),
                ),
                ("like", models.IntegerField(default=0, verbose_name="点赞数")),
                ("fans", models.IntegerField(default=0, verbose_name="粉丝数")),
                ("follow", models.IntegerField(default=0, verbose_name="关注数")),
                ("blog_num", models.IntegerField(default=0, verbose_name="博客数")),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "user",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
